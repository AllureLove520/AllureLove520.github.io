<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java 字符串概述及比较]]></title>
    <url>%2F2019%2F07%2F27%2FJava-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A6%82%E8%BF%B0%E5%8F%8A%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[String类概述包路径：java.lang.String api当中说：Java 程序中的所有字符串字面值（如 &quot;abc&quot; ）都作为此类的实例实现。其实是说：程序当中所有双引号字符串都是String对象，即使没有new也是。 字符串的特点 字符串的内容永不可变 正是因为字符串不可改变所以字符串可以共享使用 字符串效果相当于char [] 字符数组，但底层原理是byte [] 字节数组 创建字符串常见的3+1种方式 三种构造方法 public String (); 创建一个空白字符串，不含有任何内容 public String (char [] array); 根据char字符数组来创建字符串 public String (byte [] array); 根据byte字节数组来创建字符串 一种直接创建 String str = “hello”; 代码实例1234567891011121314151617//空参构造String str = new String();System.out.println("第一个字符串：" + str);//使用字符数组来创建字符串char [] charArr = &#123;'A','B','C'&#125; ;String str2 = new String(charArr) ;System.out.println("第二个字符串：" + str2);//使用byte数组来创建字符串byte [] bytrArr = &#123;97,98,99&#125;;String str3 = new String(bytrArr) ;System.out.println("第二个字符串："+str3);//直接创建String s = "hello";System.out.println(s); 字符串的内容比较==是进行对象的地址值比较，如果需要字符串的内容比较，有如下两种方法 1、public boolean equals(Object obj) 参数可以是任何类型，只有参数是一个字符串并且内容相同时才会是true 否则为false 2、equalsIgnoreCase方法，不区分大小写 123456789101112131415161718192021/* 方法一 格式 参数1.equals(参数2) 该方法严格区分大小写 */ String str1 = "ABC"; String str2 = "ABC"; //两个变量比较 System.out.println(str1.equals(str2)); //变量和常量比较 System.out.println(str1.equals("hello")); //常量与常量比较 System.out.println("hello".equals("hello")); /*方法二 格式 参数1.equalsIgnoreCase(参数2) 该方法不区分大小写（英文） */ System.out.println(str1.equalsIgnoreCase("abc")); 注意事项1、任何对象都可以用Object 来接收 2、equals方法具有对称性 a.equals(b) 和 b.equals(a) 效果一样 3、如果比较双方一个是常量字符串一个是变量字符串 ，推荐把常量放在前面，变量放在后面， 12"ABC".equals(str1) //推荐 str1.equals("ABC") //不推荐]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Random随机数]]></title>
    <url>%2F2019%2F07%2F23%2FJava%20Random%E9%9A%8F%E6%9C%BA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Random随机类三个步骤 1、导包 import java.util.Random; 2、创建 Random r = new Random 3、使用 获取一个int类型的随机数，int i = r.nextInt()小括号可以留空，如果留空那么获取随机数范围是int范围里的随机一个数， 举个栗子 123456public class Main&#123; public static void main(String []args) &#123; Random r = new Random(); int i = r.nextInt(); //输出结果为int范围中的随机一个数 &#125;&#125; 如果要获取指定范围的随机数，那么小括号里填入范围数，int i = r.nextInt(100)括号里的参数代表了范围 左闭右开区间，实际含义是[ 0 ~ 100)，实际范围是0 ~ 99， 因为是右开区间所以右边的100是取不到的 1int i = r.nextInt(100); //范围0 ~ 99 如果要想获取1 ~ 100之间的随机的，需要整体加 1 1int i = r.nextInt(100) + 1; //范围1 ~ 100 接下来玩个小游戏 猜一个1 ~ 100 以内的随机数，如果猜的数值大于随机数值则提示太大了，反之提示太小了，直到猜中为止。 1234567891011121314151617181920public class Main&#123; public static void main(String []args) &#123; //创建对象 Random r = new Random(); int i = r.nextInt(100) + 1; Scanner sca = new Scanner(System.in); while(true)&#123; //创建死循环 System.out.println("请开始你的表演"); int j = sca.nextInt(); if(j &gt; i) &#123; System.out.println("太大了"); &#125;else if(j &lt; i) &#123; System.out.println("太小了"); &#125;else&#123; System.out.println("恭喜，答对了"); break; &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java ArrsyList集合]]></title>
    <url>%2F2019%2F07%2F23%2FJava-ArrsyList%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[ArrayList 数组的长度不可以发生改变，但ArrayList集合的长度可以发生改变。对于ArrayList来说，有一个尖括号 代表泛型。 泛型：也就是装在集合中的所有元素，全都是统一类型。 注意：泛型只能是引用类型，不能是基本类型、 12345678public class Main&#123; public static void main(String []args) &#123; //创建一个String类型的Arraylist集合，名称为 list , //注意：从jdk 1.7开始，右侧的尖括号可以不写内容，但括号本身还是要写 ArrayList &lt;String&gt; list = new ArrayList&lt;&gt; (); System.out.println(list); //注意：对于Arraylist集合来说，直接打印得到不是地址值，如过内容为空，那么打印的结果是 [] &#125;&#125; public boolean add (E e);向集合中添加元素，参数类型和泛型一致 向集合添加数据，要用到add方法 123456list.add ("小王");list.add ("小张");list.add ("小红");System.out.println(list); //[小王, 小张, 小红]boolean b = list.add ("小王");System.out.println(b); //true 对于ArrayList集合来说，add添加方法是一定能添加成功的，但对于其他集合add添加方法不一定能成功 public E get (int index);从集合中获取一个元素，使用get方法 1String str = list.get(1); //获取的索引值是从0开始的 public E remove (int index);从集合中删除元素，使用remove方法 123String remove = list.remove(1); //索引值从0开始System.out.println(remove); //打印被删除的元素System.out.println(list); //打印删除后的ArrayLis集合 public int size() ;获取Arraylist 集合的长度。也就是集合的元素个数 size()方法 1int size = list.size() 遍历集合 1234567891011121314151617public class Main&#123; public static void main(String []args) &#123; ArrayList &lt;String&gt; list = new ArrayList&lt;&gt; (); list.add ("小王"); list.add ("小张"); list.add ("小红"); //idea快速生成 list.fori for (int i = 0; i &lt; list.size(); i++) &#123; System.out.println(list.get(i)); /*打印结果 小王 小张 小红 */ &#125; &#125;&#125; 小练习一 1234567891011121314151617181920212223242526import java.util.ArrayList;/*题目要求：定义4个学生对象，添加到集合中，并且遍历 */public class Demo &#123; public static void main(String[] args) &#123; //创建对象 Student one = new Student("小王",18) ; Student two = new Student("小张",19) ; Student three = new Student("小红",20) ; Student four = new Student("小绿",21) ; //创建集合 ArrayList &lt;Student&gt; list = new ArrayList&lt;&gt;(); //添加到集合 list.add(one); list.add(two); list.add(three); list.add(four); //遍历 for (int i = 0; i &lt; list.size(); i++) &#123; Student stu = list.get(i); System.out.println("姓名："+ stu.getName()+ "\t年龄：" + stu.getAge()); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930//创建学生类public class Student &#123; private String name ; private int age ; //无参构造 public Student() &#123; &#125; //全参构造 public Student(String name, int age) &#123; this.name = name; this.age = age; &#125; //Get and Set public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125;&#125; 小练习二 123456789101112131415161718192021222324252627import java.util.ArrayList;/*题目要求：按指定格式输出集合 如&#123;元素1@元素2@元素3@ ...&#125; */public class Demo &#123; public static void main(String[] args) &#123; ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add("喜羊羊"); list.add("美羊羊"); list.add("懒羊羊"); System.out.println(list); //默认格式：[喜羊羊, 美羊羊, 懒羊羊] PrintlnArrayList(list); &#125; //定义方法 public static void PrintlnArrayList(ArrayList&lt;String&gt; list) &#123; System.out.print("&#123;"); for (int i = 0; i &lt; list.size(); i++) &#123; String name = list.get(i); if (i == list.size() - 1) &#123; //判断一下是否为最后一个，如果是最后一个元素，那么以 &#125; 结尾 System.out.println(name + "&#125;"); &#125; else &#123; System.out.print(name + "@"); //&#123;喜羊羊@美羊羊@懒羊羊&#125; &#125; &#125; &#125; 小练习三 1234567891011121314151617181920212223242526272829303132333435363738/*题目要求：用一个大集合存入20 个随机数，自定义方法筛选其中偶数，将其放入小集合中 */import java.util.ArrayList;import java.util.Random;public class DemoArrayList &#123; public static void main(String[] args) &#123; //创建大集合 ArrayList&lt;Integer&gt; maxlist = new ArrayList&lt;&gt;(); //创建随机数 Random r = new Random(); for (int i = 0; i &lt; 20; i++) &#123; int ran = r.nextInt(100) + 1; maxlist.add(ran); &#125; //System.out.println(maxlist); //调用方法 ArrayList&lt;Integer&gt; min = min(maxlist); System.out.println("偶数总共有"+min.size()+"个"); for (int i = 0; i &lt; min.size(); i++) &#123; //Integer integer = min.get(i); System.out.println(min.get(i)); &#125; &#125; public static ArrayList&lt;Integer&gt; min (ArrayList&lt;Integer&gt; maxlist)&#123; //创建小集合 ArrayList&lt;Integer&gt; minlist = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; maxlist.size(); i++) &#123; if (maxlist.get(i) % 2 == 0) &#123; minlist.add(maxlist.get(i)) ; &#125; &#125; return minlist ; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 匿名对象概述]]></title>
    <url>%2F2019%2F07%2F23%2FJava%20%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[一般情况我们创建一个对象，总是要给对象取一个名字，但在有些情况下这个名字是可以省略的。没有名字的对象就叫匿名对像。 一般情况创建对象的标准格式 类名称 对象名 = new 类名称(); 举个栗子 12345678public class Main&#123; public static void main(String []args) &#123; //根据Person类创建对象 Person person = new Person(); person.name = "村长"; person.Main //我叫村长 &#125;&#125; 创建一个类 123456public class Person &#123; String name; public void Main ()&#123; System.out.println("我叫" + name) &#125;&#125; 匿名对像格式，只有右边的对象，没有左边的名字以及赋值运算符 new 类名称 () ; 12new Person().name = "村长"new Person().Main // 我叫null 输出结果不会是“我叫村长”，原因是创建了一个全新的匿名对象 注意事项 匿名对象只能使用唯一的一次，下次使用只能再创建 使用建议 如果确定一个对象，只需要使用唯一的一次，那就可以使用匿名对象]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 自增自减概述]]></title>
    <url>%2F2019%2F07%2F22%2FJava%20%E8%87%AA%E5%A2%9E%E8%87%AA%E5%87%8F%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[一、概述自增操作符 ++ ，即变量自身加1。自减操作符 – ，即变量自身减1 ，在单独使用时前++和后++没有区别， 二、分类自增操作主要分为前置自增和后置自增，相同自减操作也一样，主要分为前置自减和后置自减演示如下代码 1234567//自增int i = 10,j = 20 ;i++; //i = 11++j; //j = 21//自减i-- //i = 10--j //j = 20 如下表格，进行赋值操作 int i = 操作符 操作符 名称 描述 结果(假设 j = 1) var++ 后置自增 将var加1，在语句中使用原来的var i = 1 , j = 2 ++var 前置自增 将var加1，在语句中使用新的var i = 2 , j = 2 var– 后置自减 将var减1，语句中使用原来的var i = 1 , j = 0 –var 前置自减 将var减1，语句中使用新的var i = 0 , j = 0 12345678// 思路： a++的值为 a ，++a的值为a+1int a = 5 ,b = 5 ;int c = a++; //分析：将a++的值 5 赋值给 c ,然后a再自增 1 int d = ++b; //分析：将++b的值 6 赋值给 d ,然后b再自增 1System.out.println(a) //a = 6System.out.println(b) //b = 6System.out.println(c) //c = 5 System.out.println(d) //d = 6 再举个栗子 1234int i = 10 ;int j = i++ + i * 3;System.out.println(i) //11System.out.println(j) //43]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java for循环奇偶数练习]]></title>
    <url>%2F2019%2F07%2F21%2FJava%20for%E5%BE%AA%E7%8E%AF%E5%A5%87%E5%81%B6%E6%95%B0%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[题目要求输出两位数的所有偶数 1234567891011121314151617181920// 方法一 public class even &#123; public static void main(String []args) &#123; //定义变量，范围 10 ~ 99 for (int i = 10; i &lt; 99; i++) &#123; //判断是否为偶数 if (i % 2 == 0) &#123; System.out.println(i); &#125; &#125; &#125; &#125; // 方法二 public class even &#123; public static void main(String []args) &#123; for (int i = 10; i &lt; 99; i += 2) &#123; System.out.println(i); &#125; &#125; &#125; 将方法二运用到 while 循环上， 12345678910111213141516171819202122//题目要求：打印100 ~ 200的奇数public class even &#123; public static void main(String []args) &#123; int i = 100; //初始化 i while (i &lt;= 200)&#123; if (i % 2 == 1) &#123; //或者 i % 2 != 0 System.out.println(i); &#125; i++ ; &#125; &#125;&#125;//方法二 public class even &#123; public static void main(String []args) &#123; int i = 100; //初始化 i while (i &lt;= 200)&#123; System.out.println(i); i += 2 ; &#125; &#125;&#125; 获取各个位之和 123456789101112131415/** * @author 村长ABC * @version 1.0.0 * @ClassName num.java * @Description 描述：获取各个位之和 * @Precautions 注意事项： * @createTime 2019年07月21日 15:47:00 */public class num &#123; public static void main(String[] args) &#123; int num = 123; int i = num % 10 + num / 10 % 10 + num / 100 % 10; System.out.println(i); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---入门篇]]></title>
    <url>%2F2019%2F07%2F19%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E5%85%A5%E9%97%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[前言什么是 Hexo ?Hexo 是一个快速、简洁、高效、高逼格的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装所需要的工具Git __ __ Node.js 安装完成后打开cmd（win + r ）输入分别下面两条命令查看版本信息，返回的是版本信息就说明安装成功了 1git --version node -v 接下来就可以安装Hexo了，继续在命令行输入下面这条命令，第一条命令阔能会很慢，甚至要翻墙！所以这里给出了第二条命令，阿里的源，速度相对来说快很多。 1npm install -g hexo-cli 12npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install hexo-cli -g 安装完成后输入 hexo -v 查看版本信息，返回的是版本信息就说明安装成功了 初始化hexo新建一个空文件夹，名称随意，打开后右键选择Git Bash Here打开Git命令窗口，然后执行 1$hexo init 安装依赖包1$npm install 执行完后会在刚刚创建的文件夹中生成相关的文件 最后执行下面的命令，完成后会出现一个网址 http://localhost:4000在浏览器输入这个网址就行了，因为是在调试模式下运行（为了方便后续更改）所以后台一直在执行，如果要关闭这个进程可以 Ctrl + c 关闭 1$ hexo clean &amp;&amp; hexo server --debug 预览效果 至此，初步搭建完成，]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---修改底部标签样式]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E4%BF%AE%E6%94%B9%E5%BA%95%E9%83%A8%E6%A0%87%E7%AD%BE%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[修改底部标签样式 一、打开文件 Blog\themes\next\layout\_macro\post.swigctrl + f 查找 rel=&quot;tag&quot;&gt;#，如果没有就查找 # 然后替换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 然后重建缓存，调试查看效果]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---文章结尾添加版权信息]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E6%96%87%E7%AB%A0%E7%BB%93%E5%B0%BE%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[在文章结尾处添加版权信息 一、修改主题文件打开 Blog\themes\next\_config.yml 按ctrl + f 查找 creative_commons:将post的值改为true 1234567891011121314# Creative Commons 4.0 International License.# See: https://creativecommons.org/share-your-work/licensing-types-examples# Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero# You can set a language value if you prefer a translated version of CC license, e.g. deed.zh# CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org#版权信息creative_commons: license: by-nc-sa #表示当前使用的协议，可以随意更改 sidebar: false #表示是否要显示在左侧边栏 post: true #表示是否在文章结尾处显示 language: 如果你觉得不够详细，可查看 hexo指南]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---文章后面添加结束语]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E6%96%87%E7%AB%A0%E5%90%8E%E9%9D%A2%E6%B7%BB%E5%8A%A0%E7%BB%93%E6%9D%9F%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[文章后面添加结束标语 一、新建文件在 Blog\themes\next\layout\_macro 下创建 passage-end-tag.swig 文件 ，打开该文件添加以下代码 1234567&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #3c3c3c;font-size:15px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;//如果想替换别的颜色可以更改 color： #后面的色值， font-size:15px 文字大小 二、修改 post.swig 文件打开Blog\themes\next\layout_macro\post.swig文件，在post-body后，post-footer前，添加以下代码 ，可能会找不到，博主这里是直接添加到第 354 行的位置 &lt;div&gt; {% if not is_index %} {% include 'passage-end-tag.swig' %} {% endif %} &lt;/div&gt;三、最后修改主题配置文件打开 Blog\themes\next _config.yml 在末尾的地方添加如下代码 #文章末尾添加“本文结束”标记 passage_end_tag: enabled: true 最后进入博客根目录，执行下面这条命令即可，小扩展：hexo clean 重建缓存，Hexo server –debug 调试 $ hexo clean &amp;&amp; Hexo server –debug]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
