<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java Arrays工具类]]></title>
    <url>%2F2019%2F07%2F30%2FJava-Arrays%E5%B7%A5%E5%85%B7%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[/* java.util.Arrays是一个数组工具类，里面集成了大量静态方法，用来实现数组常见操作 public class Arrays(将数组按变成字符串，格式 [元素1，元素2，元素3]) */ import java.util.ArrayList; import java.util.Arrays; public class DemoArrays { public static void main(String[] args) { int[] arr = {10, 20, 30}; String s = Arrays.toString(arr); System.out.println(s); //[10, 20, 30] } } //public static void sort(数组) 按照升序（从小到大）对数组元素进行排序 /*注意事项：如果是数值，sort默认按照从小到大排序， 如果是字符串，sort默认按照字母排序，如 a ~ z 如果是中文，则看所对于的数字 如果是自定义类型，这个自定义类需要Comparable或者Comparator接口的支持 */ class Demo1Arrays { public static void main(String[] args) { int[] array = {11, 3, 8, 21, 14, 8}; System.out.println(Arrays.toString(array)); //排序前[11, 3, 8, 21, 14, 8] Arrays.sort(array); System.out.println(Arrays.toString(array)); //排序后[3, 8, 8, 11, 14, 21] //当然对于字符串也行 String[] str = {&quot;bbb&quot;, &quot;aaa&quot;, &quot;z&quot;, &quot;ccc&quot;}; Arrays.sort(str); System.out.println(Arrays.toString(str)); } } /*小练习 将一个随机字符串进行的所有字符升序排列，倒序打印 */ class Demo2 { public static void main(String[] args) { String str = &quot;wnciglsxmgf5461230241&quot;; char[] chars = str.toCharArray(); Arrays.sort(chars); //排序 //idea输入fori 加加 forr 减减 for (int i = chars.length - 1; i &gt;= 0; i--) { System.out.print(chars[i] + &quot; &quot;); //x w s n m l i g g f c 6 5 4 4 3 2 2 1 1 0 } } }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 字符串常用方法二]]></title>
    <url>%2F2019%2F07%2F29%2FJava%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[字符串的获取操作1、 public int length() 获取字符串的长度 //获取字符串的长度 int length = &quot;gfdsfdfsdfhfsidhfsfh&quot;.length(); 2、 public String concat(String str) 拼接字符串 //字符串拼接 String str1 = &quot;Hello&quot;; String str1 = &quot;World&quot;; String str3 = str1.concat(str2); 3、public char charAt(int index) 获取指定位置的单个字符 char c = &quot;hello&quot;.charAt(2); //获取第2号元素字符 4、public int indexOf(String str) 查找字符串所在的索引位置，如果该字符串多次出现拿第一次的索引位置 int place = &quot;helloworld&quot;.indexOf(&quot;owo&quot;); 字符串的截取方法 public String substring(int beginIndex) 截取从参数位置一直到末尾，返会新字符串 public String substring(int beginIndex, int endIndex) 截取从begin到end结束，中间的字符串 [begin end) 左闭右开 ，包含左不包含右 代码实例 String str1 = &quot;hellojava&quot;; String str2 = str1.substring(5); //截取索引值5开始到末尾的字符串 String str3 = str1.substring(3, 6); //截取索引值3到6之间的字符串 System.out.println(str2); //java System.out.println(str3); //loj 字符串的转换常用方法 public char[] toCharArray() 将字符串转换成字节数组 char[] chars = &quot;java&quot;.toCharArray(); System.out.println(chars[2]); //结果 v //获取数组长度 System.out.println(chars.length); //结果 4 public byte[] getBytes() 获取当前字符串低层字节数组 byte[] bytes = &quot;ABC&quot;.getBytes(); //遍历数组 for (int i = 0; i &lt; bytes.length; i++) { System.out.println(bytes[i]); //65 66 67 } 字符串的内容替换 将老的字符串替换成新的字符串 //仿游戏敏感词替换 String str = &quot;你TM的 ，会不会玩，垃圾，&quot;; String replace = str.replace(&quot;垃圾&quot;, &quot;**&quot;); System.out.println(replace); //你TM的 ，会不会玩，**， 字符串的切分方法 按照参数规则，将字符串切分成为若干份 String s = &quot;小王，小红，小绿&quot;; String[] splitArr = s.split(&quot;,&quot;); for (int i = 0; i &lt; splitArr.length; i++) { System.out.print(splitArr[i]); //小王 小红 小绿 } 注意，英文句点”.” 不能切成功，原因是英文句点在单独出现时在正则表达式当中有特殊含义,如果要进行英文句点切分，需要加上两反斜杠 \\. String s = &quot;小王.小红.小绿&quot;; String[] splitArr = s.split(&quot;\\.&quot;); for (int i = 0; i &lt; splitArr.length; i++) { System.out.println(splitArr[i]); } 小练习定义一个方法，将数组{1,2,3}按照指定格式拼接字符串 ，格式[word1#word2#word3] public static void main(String[] args) { int[] arr = {1, 2, 3}; //System.out.println(fromarrtoString(arr)); String string = fromarrtoString(arr); System.out.println(string); } public static String fromarrtoString(int[] arr) { String str = &quot;[&quot;; for (int i = 0; i &lt; arr.length; i++) { if (i == arr.length - 1) { str += &quot;word&quot; + arr[i] + &quot;]&quot;; } else { str += &quot;word&quot; + arr[i] + &quot;#&quot;; } } return str; }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Gulp压缩Hexo博客]]></title>
    <url>%2F2019%2F07%2F28%2F%E5%88%A9%E7%94%A8Gulp%E5%8E%8B%E7%BC%A9Hexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1.全局安装 Gulpnpm install --global gulp上面那条命令基本上废了，很慢，而且还各种报错，失败了n次了。安装失败的可以用下面这条命令 sudo cnpm install --global gulp如果是windows系统，以管理员方式打开cmd 执行下面的命令 cnpm install --global gulp安装完后执行 gulp -v查看是否安装 进入博客项目根目录，执行下面这条命令，安装gulp插件 npm i gulp gulp-htmlclean gulp-htmlmin gulp-imagemin gulp-minify-css gulp-uglify --save2.创建 gulpfile.js 文件同样是在博客项目根目录下，创建gulpfile.js文件，将一下代码拷贝到该文件，可能有些会报错，但无关紧要， var gulp = require(&#39;gulp&#39;); var minifycss = require(&#39;gulp-minify-css&#39;); var uglify = require(&#39;gulp-uglify&#39;); var htmlmin = require(&#39;gulp-htmlmin&#39;); var htmlclean = require(&#39;gulp-htmlclean&#39;); var imagemin = require(&#39;gulp-imagemin&#39;); // 压缩html gulp.task(&#39;minify-html&#39;, function() { return gulp.src(&#39;./public/**/*.html&#39;) .pipe(htmlclean()) .pipe(htmlmin({ removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, })) .pipe(gulp.dest(&#39;./public&#39;)) }); // 压缩css gulp.task(&#39;minify-css&#39;, function() { return gulp.src(&#39;./public/**/*.css&#39;) .pipe(minifycss({ compatibility: &#39;ie8&#39; })) .pipe(gulp.dest(&#39;./public&#39;)); }); // 压缩js gulp.task(&#39;minify-js&#39;, function() { return gulp.src(&#39;./public/js/**/*.js&#39;) .pipe(uglify()) .pipe(gulp.dest(&#39;./public&#39;)); }); // 压缩图片 gulp.task(&#39;minify-images&#39;, function() { return gulp.src(&#39;./public/images/**/*.*&#39;) .pipe(imagemin( [imagemin.gifsicle({&#39;optimizationLevel&#39;: 3}), imagemin.jpegtran({&#39;progressive&#39;: true}), imagemin.optipng({&#39;optimizationLevel&#39;: 7}), imagemin.svgo()], {&#39;verbose&#39;: true})) .pipe(gulp.dest(&#39;./public/images&#39;)) }); // 默认任务 gulp.task(&#39;default&#39;, gulp.parallel( &#39;minify-html&#39;,&#39;minify-css&#39;,&#39;minify-js&#39;,&#39;minify-images&#39; ));]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 字符串概述及比较]]></title>
    <url>%2F2019%2F07%2F27%2FJava-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A6%82%E8%BF%B0%E5%8F%8A%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[String类概述包路径：java.lang.String api当中说：Java 程序中的所有字符串字面值（如 &quot;abc&quot; ）都作为此类的实例实现。其实是说：程序当中所有双引号字符串都是String对象，即使没有new也是。 字符串的特点 字符串的内容永不可变 正是因为字符串不可改变所以字符串可以共享使用 字符串效果相当于char [] 字符数组，但底层原理是byte [] 字节数组 创建字符串常见的3+1种方式 三种构造方法 public String (); 创建一个空白字符串，不含有任何内容 public String (char [] array); 根据char字符数组来创建字符串 public String (byte [] array); 根据byte字节数组来创建字符串 一种直接创建 String str = “hello”; 代码实例 //空参构造 String str = new String(); System.out.println(&quot;第一个字符串：&quot; + str); //使用字符数组来创建字符串 char [] charArr = {&#39;A&#39;,&#39;B&#39;,&#39;C&#39;} ; String str2 = new String(charArr) ; System.out.println(&quot;第二个字符串：&quot; + str2); //使用byte数组来创建字符串 byte [] bytrArr = {97,98,99}; String str3 = new String(bytrArr) ; System.out.println(&quot;第二个字符串：&quot;+str3); //直接创建 String s = &quot;hello&quot;; System.out.println(s); 字符串的内容比较==是进行对象的地址值比较，如果需要字符串的内容比较，有如下两种方法 1、public boolean equals(Object obj) 参数可以是任何类型，只有参数是一个字符串并且内容相同时才会是true 否则为false 2、equalsIgnoreCase方法，不区分大小写 /* 方法一 格式 参数1.equals(参数2) 该方法严格区分大小写 */ String str1 = &quot;ABC&quot;; String str2 = &quot;ABC&quot;; //两个变量比较 System.out.println(str1.equals(str2)); //变量和常量比较 System.out.println(str1.equals(&quot;hello&quot;)); //常量与常量比较 System.out.println(&quot;hello&quot;.equals(&quot;hello&quot;)); /*方法二 格式 参数1.equalsIgnoreCase(参数2) 该方法不区分大小写（英文） */ System.out.println(str1.equalsIgnoreCase(&quot;abc&quot;)); 注意事项1、任何对象都可以用Object 来接收 2、equals方法具有对称性 a.equals(b) 和 b.equals(a) 效果一样 3、如果比较双方一个是常量字符串一个是变量字符串 ，推荐把常量放在前面，变量放在后面， &quot;ABC&quot;.equals(str1) //推荐 str1.equals(&quot;ABC&quot;) //不推荐]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Random随机数]]></title>
    <url>%2F2019%2F07%2F23%2FJava%20Random%E9%9A%8F%E6%9C%BA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Random随机类三个步骤 1、导包 import java.util.Random; 2、创建 Random r = new Random 3、使用 获取一个int类型的随机数，int i = r.nextInt()小括号可以留空，如果留空那么获取随机数范围是int范围里的随机一个数， 举个栗子 public class Main{ public static void main(String []args) { Random r = new Random(); int i = r.nextInt(); //输出结果为int范围中的随机一个数 } } 如果要获取指定范围的随机数，那么小括号里填入范围数，int i = r.nextInt(100)括号里的参数代表了范围 左闭右开区间，实际含义是[ 0 ~ 100)，实际范围是0 ~ 99， 因为是右开区间所以右边的100是取不到的 int i = r.nextInt(100); //范围0 ~ 99 如果要想获取1 ~ 100之间的随机的，需要整体加 1 int i = r.nextInt(100) + 1; //范围1 ~ 100 接下来玩个小游戏 猜一个1 ~ 100 以内的随机数，如果猜的数值大于随机数值则提示太大了，反之提示太小了，直到猜中为止。 public class Main{ public static void main(String []args) { //创建对象 Random r = new Random(); int i = r.nextInt(100) + 1; Scanner sca = new Scanner(System.in); while(true){ //创建死循环 System.out.println(&quot;请开始你的表演&quot;); int j = sca.nextInt(); if(j &gt; i) { System.out.println(&quot;太大了&quot;); }else if(j &lt; i) { System.out.println(&quot;太小了&quot;); }else{ System.out.println(&quot;恭喜，答对了&quot;); break; } } } }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java ArrayList集合]]></title>
    <url>%2F2019%2F07%2F23%2FJava-ArrayList%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[ArrayList 数组的长度不可以发生改变，但ArrayList集合的长度可以发生改变。对于ArrayList来说，有一个尖括号 代表泛型。 泛型：也就是装在集合中的所有元素，全都是统一类型。 注意：泛型只能是引用类型，不能是基本类型、 public class Main{ public static void main(String []args) { //创建一个String类型的Arraylist集合，名称为 list , //注意：从jdk 1.7开始，右侧的尖括号可以不写内容，但括号本身还是要写 ArrayList &lt;String&gt; list = new ArrayList&lt;&gt; (); System.out.println(list); //注意：对于Arraylist集合来说，直接打印得到不是地址值，如过内容为空，那么打印的结果是 [] } } public boolean add (E e);向集合中添加元素，参数类型和泛型一致 向集合添加数据，要用到add方法 list.add (&quot;小王&quot;); list.add (&quot;小张&quot;); list.add (&quot;小红&quot;); System.out.println(list); //[小王, 小张, 小红] boolean b = list.add (&quot;小王&quot;); System.out.println(b); //true 对于ArrayList集合来说，add添加方法是一定能添加成功的，但对于其他集合add添加方法不一定能成功 public E get (int index);从集合中获取一个元素，使用get方法 String str = list.get(1); //获取的索引值是从0开始的 public E remove (int index);从集合中删除元素，使用remove方法 String remove = list.remove(1); //索引值从0开始 System.out.println(remove); //打印被删除的元素 System.out.println(list); //打印删除后的ArrayLis集合 public int size() ;获取Arraylist 集合的长度。也就是集合的元素个数 size()方法 int size = list.size() 遍历集合 public class Main{ public static void main(String []args) { ArrayList &lt;String&gt; list = new ArrayList&lt;&gt; (); list.add (&quot;小王&quot;); list.add (&quot;小张&quot;); list.add (&quot;小红&quot;); //idea快速生成 list.fori for (int i = 0; i &lt; list.size(); i++) { System.out.println(list.get(i)); /*打印结果 小王 小张 小红 */ } } } 小练习一 import java.util.ArrayList; /*题目要求：定义4个学生对象，添加到集合中，并且遍历 */ public class Demo { public static void main(String[] args) { //创建对象 Student one = new Student(&quot;小王&quot;,18) ; Student two = new Student(&quot;小张&quot;,19) ; Student three = new Student(&quot;小红&quot;,20) ; Student four = new Student(&quot;小绿&quot;,21) ; //创建集合 ArrayList &lt;Student&gt; list = new ArrayList&lt;&gt;(); //添加到集合 list.add(one); list.add(two); list.add(three); list.add(four); //遍历 for (int i = 0; i &lt; list.size(); i++) { Student stu = list.get(i); System.out.println(&quot;姓名：&quot;+ stu.getName()+ &quot;\t年龄：&quot; + stu.getAge()); } } } //创建学生类 public class Student { private String name ; private int age ; //无参构造 public Student() { } //全参构造 public Student(String name, int age) { this.name = name; this.age = age; } //Get and Set public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } } 小练习二 import java.util.ArrayList; /*题目要求：按指定格式输出集合 如{元素1@元素2@元素3@ ...} */ public class Demo { public static void main(String[] args) { ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;喜羊羊&quot;); list.add(&quot;美羊羊&quot;); list.add(&quot;懒羊羊&quot;); System.out.println(list); //默认格式：[喜羊羊, 美羊羊, 懒羊羊] PrintlnArrayList(list); } //定义方法 public static void PrintlnArrayList(ArrayList&lt;String&gt; list) { System.out.print(&quot;{&quot;); for (int i = 0; i &lt; list.size(); i++) { String name = list.get(i); if (i == list.size() - 1) { //判断一下是否为最后一个，如果是最后一个元素，那么以 } 结尾 System.out.println(name + &quot;}&quot;); } else { System.out.print(name + &quot;@&quot;); //{喜羊羊@美羊羊@懒羊羊} } } } 小练习三 /* 题目要求：用一个大集合存入20 个随机数，自定义方法筛选其中偶数，将其放入小集合中 */ import java.util.ArrayList; import java.util.Random; public class DemoArrayList { public static void main(String[] args) { //创建大集合 ArrayList&lt;Integer&gt; maxlist = new ArrayList&lt;&gt;(); //创建随机数 Random r = new Random(); for (int i = 0; i &lt; 20; i++) { int ran = r.nextInt(100) + 1; maxlist.add(ran); } //System.out.println(maxlist); //调用方法 ArrayList&lt;Integer&gt; min = min(maxlist); System.out.println(&quot;偶数总共有&quot;+min.size()+&quot;个&quot;); for (int i = 0; i &lt; min.size(); i++) { //Integer integer = min.get(i); System.out.println(min.get(i)); } } public static ArrayList&lt;Integer&gt; min (ArrayList&lt;Integer&gt; maxlist){ //创建小集合 ArrayList&lt;Integer&gt; minlist = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; maxlist.size(); i++) { if (maxlist.get(i) % 2 == 0) { minlist.add(maxlist.get(i)) ; } } return minlist ; } }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 匿名对象概述]]></title>
    <url>%2F2019%2F07%2F23%2FJava%20%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[一般情况我们创建一个对象，总是要给对象取一个名字，但在有些情况下这个名字是可以省略的。没有名字的对象就叫匿名对像。 一般情况创建对象的标准格式 类名称 对象名 = new 类名称(); 举个栗子 public class Main{ public static void main(String []args) { //根据Person类创建对象 Person person = new Person(); person.name = &quot;村长&quot;; person.Main //我叫村长 } } 创建一个类 public class Person { String name; public void Main (){ System.out.println(&quot;我叫&quot; + name) } } 匿名对像格式，只有右边的对象，没有左边的名字以及赋值运算符 new 类名称 () ; new Person().name = &quot;村长&quot; new Person().Main // 我叫null 输出结果不会是“我叫村长”，原因是创建了一个全新的匿名对象 注意事项 匿名对象只能使用唯一的一次，下次使用只能再创建 使用建议 如果确定一个对象，只需要使用唯一的一次，那就可以使用匿名对象]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 自增自减概述]]></title>
    <url>%2F2019%2F07%2F22%2FJava%20%E8%87%AA%E5%A2%9E%E8%87%AA%E5%87%8F%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[一、概述自增操作符 ++ ，即变量自身加1。自减操作符 – ，即变量自身减1 ，在单独使用时前++和后++没有区别， 二、分类自增操作主要分为前置自增和后置自增，相同自减操作也一样，主要分为前置自减和后置自减演示如下代码 //自增 int i = 10,j = 20 ; i++; //i = 11 ++j; //j = 21 //自减 i-- //i = 10 --j //j = 20 如下表格，进行赋值操作 int i = 操作符 操作符 名称 描述 结果(假设 j = 1) var++ 后置自增 将var加1，在语句中使用原来的var i = 1 , j = 2 ++var 前置自增 将var加1，在语句中使用新的var i = 2 , j = 2 var– 后置自减 将var减1，语句中使用原来的var i = 1 , j = 0 –var 前置自减 将var减1，语句中使用新的var i = 0 , j = 0 // 思路： a++的值为 a ，++a的值为a+1 int a = 5 ,b = 5 ; int c = a++; //分析：将a++的值 5 赋值给 c ,然后a再自增 1 int d = ++b; //分析：将++b的值 6 赋值给 d ,然后b再自增 1 System.out.println(a) //a = 6 System.out.println(b) //b = 6 System.out.println(c) //c = 5 System.out.println(d) //d = 6 再举个栗子 int i = 10 ; int j = i++ + i * 3; System.out.println(i) //11 System.out.println(j) //43]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java for循环奇偶数练习]]></title>
    <url>%2F2019%2F07%2F21%2FJava%20for%E5%BE%AA%E7%8E%AF%E5%A5%87%E5%81%B6%E6%95%B0%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[题目要求输出两位数的所有偶数 // 方法一 public class even { public static void main(String []args) { //定义变量，范围 10 ~ 99 for (int i = 10; i &lt; 99; i++) { //判断是否为偶数 if (i % 2 == 0) { System.out.println(i); } } } } // 方法二 public class even { public static void main(String []args) { for (int i = 10; i &lt; 99; i += 2) { System.out.println(i); } } } 将方法二运用到 while 循环上， //题目要求：打印100 ~ 200的奇数 public class even { public static void main(String []args) { int i = 100; //初始化 i while (i &lt;= 200){ if (i % 2 == 1) { //或者 i % 2 != 0 System.out.println(i); } i++ ; } } } //方法二 public class even { public static void main(String []args) { int i = 100; //初始化 i while (i &lt;= 200){ System.out.println(i); i += 2 ; } } } 获取各个位之和 /** * @author 村长ABC * @version 1.0.0 * @ClassName num.java * @Description 描述：获取各个位之和 * @Precautions 注意事项： * @createTime 2019年07月21日 15:47:00 */ public class num { public static void main(String[] args) { int num = 123; int i = num % 10 + num / 10 % 10 + num / 100 % 10; System.out.println(i); } }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---入门篇]]></title>
    <url>%2F2019%2F07%2F19%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E5%85%A5%E9%97%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[前言什么是 Hexo ?Hexo 是一个快速、简洁、高效、高逼格的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装所需要的工具Git __ __ Node.js 安装完成后打开cmd（win + r ）输入分别下面两条命令查看版本信息，返回的是版本信息就说明安装成功了 git --version node -v 接下来就可以安装Hexo了，继续在命令行输入下面这条命令，第一条命令阔能会很慢，甚至要翻墙！所以这里给出了第二条命令，阿里的源，速度相对来说快很多。 npm install -g hexo-clinpm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install hexo-cli -g 安装完成后输入 hexo -v 查看版本信息，返回的是版本信息就说明安装成功了 初始化hexo新建一个空文件夹，名称随意，打开后右键选择Git Bash Here打开Git命令窗口，然后执行 $hexo init安装依赖包$npm install执行完后会在刚刚创建的文件夹中生成相关的文件 最后执行下面的命令，完成后会出现一个网址 http://localhost:4000在浏览器输入这个网址就行了，因为是在调试模式下运行（为了方便后续更改）所以后台一直在执行，如果要关闭这个进程可以 Ctrl + c 关闭 $ hexo clean &amp;&amp; hexo server --debug 预览效果 至此，初步搭建完成，]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---修改底部标签样式]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E4%BF%AE%E6%94%B9%E5%BA%95%E9%83%A8%E6%A0%87%E7%AD%BE%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[修改底部标签样式 一、打开文件 Blog\themes\next\layout\_macro\post.swigctrl + f 查找 rel=&quot;tag&quot;&gt;#，如果没有就查找 # 然后替换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 然后重建缓存，调试查看效果]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---文章结尾添加版权信息]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E6%96%87%E7%AB%A0%E7%BB%93%E5%B0%BE%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[在文章结尾处添加版权信息 一、修改主题文件打开 Blog\themes\next\_config.yml 按ctrl + f 查找 creative_commons:将post的值改为true # Creative Commons 4.0 International License. # See: https://creativecommons.org/share-your-work/licensing-types-examples # Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero # You can set a language value if you prefer a translated version of CC license, e.g. deed.zh # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org #版权信息 creative_commons: license: by-nc-sa #表示当前使用的协议，可以随意更改 sidebar: false #表示是否要显示在左侧边栏 post: true #表示是否在文章结尾处显示 language: 如果你觉得不够详细，可查看 hexo指南]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---文章后面添加结束语]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E6%96%87%E7%AB%A0%E5%90%8E%E9%9D%A2%E6%B7%BB%E5%8A%A0%E7%BB%93%E6%9D%9F%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[文章后面添加结束标语 一、新建文件在 Blog\themes\next\layout\_macro 下创建 passage-end-tag.swig 文件 ，打开该文件添加以下代码 &lt;div&gt; {% if not is_index %} -------------本文结束感谢您的阅读------------- {% endif %} &lt;/div&gt; //如果想替换别的颜色可以更改 color： #后面的色值， font-size:15px 文字大小 二、修改 post.swig 文件打开Blog\themes\next\layout_macro\post.swig文件，在post-body后，post-footer前，添加以下代码 ，可能会找不到，博主这里是直接添加到第 354 行的位置 &lt;div&gt; {% if not is_index %} {% include 'passage-end-tag.swig' %} {% endif %} &lt;/div&gt;三、最后修改主题配置文件打开 Blog\themes\next _config.yml 在末尾的地方添加如下代码 #文章末尾添加“本文结束”标记 passage_end_tag: enabled: true 最后进入博客根目录，执行下面这条命令即可，小扩展：hexo clean 重建缓存，Hexo server –debug 调试 $ hexo clean &amp;&amp; Hexo server –debug]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
