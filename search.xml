<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java Random随机数]]></title>
    <url>%2F2019%2F07%2F23%2FJava%20Random%E9%9A%8F%E6%9C%BA%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Random随机类三个步骤 1、导包 import java.util.Random; 2、创建 Random r = new Random 3、使用 获取一个int类型的随机数，int i = r.nextInt()小括号可以留空，如果留空那么获取随机数范围是int范围里的随机一个数， 举个栗子 123456public class Main&#123; public static void main(String []args) &#123; Random r = new Random(); int i = r.nextInt(); //输出结果为int范围中的随机一个数 &#125;&#125; 如果要获取指定范围的随机数，那么小括号里填入范围数，int i = r.nextInt(100)括号里的参数代表了范围 左闭右开区间，实际含义是[ 0 ~ 100)，实际范围是0 ~ 99， 因为是右开区间所以右边的100是取不到的 1int i = r.nextInt(100); //范围0 ~ 99 如果要想获取1 ~ 100之间的随机的，需要整体加 1 1int i = r.nextInt(100) + 1; //范围1 ~ 100 接下来玩个小游戏 猜一个1 ~ 100 以内的随机数，如果猜的数值大于随机数值则提示太大了，反之提示太小了，直到猜中为止。 1234567891011121314151617181920public class Main&#123; public static void main(String []args) &#123; //创建对象 Random r = new Random(); int i = r.nextInt(100) + 1; Scanner sca = new Scanner(System.in); while(true)&#123; //创建死循环 System.out.println("请开始你的表演"); int j = sca.nextInt(); if(j &gt; i) &#123; System.out.println("太大了"); &#125;else if(j &lt; i) &#123; System.out.println("太小了"); &#125;else&#123; System.out.println("恭喜，答对了"); break; &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 匿名对象概述]]></title>
    <url>%2F2019%2F07%2F23%2FJava%20%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[一般情况我们创建一个对象，总是要给对象取一个名字，但在有些情况下这个名字是可以省略的。没有名字的对象就叫匿名对像。 一般情况创建对象的标准格式 类名称 对象名 = new 类名称(); 举个栗子 12345678public class Main&#123; public static void main(String []args) &#123; //根据Person类创建对象 Person person = new Person(); person.name = "村长"; person.Main //我叫村长 &#125;&#125; 创建一个类 123456public class Person &#123; String name; public void Main ()&#123; System.out.println("我叫" + name) &#125;&#125; 匿名对像格式，只有右边的对象，没有左边的名字以及赋值运算符 new 类名称 () ; 12new Person().name = "村长"new Person().Main // 我叫null 输出结果不会是“我叫村长”，原因是创建了一个全新的匿名对象 注意事项 匿名对象只能使用唯一的一次，下次使用只能再创建 使用建议 如果确定一个对象，只需要使用唯一的一次，那就可以使用匿名对象]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 自增自减概述]]></title>
    <url>%2F2019%2F07%2F22%2FJava%20%E8%87%AA%E5%A2%9E%E8%87%AA%E5%87%8F%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[一、概述自增操作符 ++ ，即变量自身加1。自减操作符 – ，即变量自身减1 ，在单独使用时前++和后++没有区别， 二、分类自增操作主要分为前置自增和后置自增，相同自减操作也一样，主要分为前置自减和后置自减演示如下代码 1234567//自增int i = 10,j = 20 ;i++; //i = 11++j; //j = 21//自减i-- //i = 10--j //j = 20 如下表格，进行赋值操作 int i = 操作符 操作符 名称 描述 结果(假设 j = 1) var++ 后置自增 将var加1，在语句中使用原来的var i = 1 , j = 2 ++var 前置自增 将var加1，在语句中使用新的var i = 2 , j = 2 var– 后置自减 将var减1，语句中使用原来的var i = 1 , j = 0 –var 前置自减 将var减1，语句中使用新的var i = 0 , j = 0 12345678// 思路： a++的值为 a ，++a的值为a+1int a = 5 ,b = 5 ;int c = a++; //分析：将a++的值 5 赋值给 c ,然后a再自增 1 int d = ++b; //分析：将++b的值 6 赋值给 d ,然后b再自增 1System.out.println(a) //a = 6System.out.println(b) //b = 6System.out.println(c) //c = 5 System.out.println(d) //d = 6 再举个栗子 1234int i = 10 ;int j = i++ + i * 3;System.out.println(i) //11System.out.println(j) //43]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java for循环奇偶数练习]]></title>
    <url>%2F2019%2F07%2F21%2FJava%20for%E5%BE%AA%E7%8E%AF%E5%A5%87%E5%81%B6%E6%95%B0%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[题目要求输出两位数的所有偶数 1234567891011121314151617181920// 方法一 public class even &#123; public static void main(String []args) &#123; //定义变量，范围 10 ~ 99 for (int i = 10; i &lt; 99; i++) &#123; //判断是否为偶数 if (i % 2 == 0) &#123; System.out.println(i); &#125; &#125; &#125; &#125; // 方法二 public class even &#123; public static void main(String []args) &#123; for (int i = 10; i &lt; 99; i += 2) &#123; System.out.println(i); &#125; &#125; &#125; 将方法二运用到 while 循环上， 12345678910111213141516171819202122//题目要求：打印100 ~ 200的奇数public class even &#123; public static void main(String []args) &#123; int i = 100; //初始化 i while (i &lt;= 200)&#123; if (i % 2 == 1) &#123; //或者 i % 2 != 0 System.out.println(i); &#125; i++ ; &#125; &#125;&#125;//方法二 public class even &#123; public static void main(String []args) &#123; int i = 100; //初始化 i while (i &lt;= 200)&#123; System.out.println(i); i += 2 ; &#125; &#125;&#125; 获取各个位之和 123456789101112131415/** * @author 村长ABC * @version 1.0.0 * @ClassName num.java * @Description 描述：获取各个位之和 * @Precautions 注意事项： * @createTime 2019年07月21日 15:47:00 */public class num &#123; public static void main(String[] args) &#123; int num = 123; int i = num % 10 + num / 10 % 10 + num / 100 % 10; System.out.println(i); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---入门篇]]></title>
    <url>%2F2019%2F07%2F19%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E5%85%A5%E9%97%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[前言什么是 Hexo ?Hexo 是一个快速、简洁、高效、高逼格的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装所需要的工具Git __ __ Node.js 安装完成后打开cmd（win + r ）输入分别下面两条命令查看版本信息，返回的是版本信息就说明安装成功了 1git --version node -v 接下来就可以安装Hexo了，继续在命令行输入下面这条命令，第一条命令阔能会很慢，甚至要翻墙！所以这里给出了第二条命令，阿里的源，速度相对来说快很多。 1npm install -g hexo-cli 12npm install -g cnpm --registry=https://registry.npm.taobao.org cnpm install hexo-cli -g 安装完成后输入 hexo -v 查看版本信息，返回的是版本信息就说明安装成功了 初始化hexo新建一个空文件夹，名称随意，打开后右键选择Git Bash Here打开Git命令窗口，然后执行 1$hexo init 安装依赖包1$npm install 执行完后会在刚刚创建的文件夹中生成相关的文件 最后执行下面的命令，完成后会出现一个网址 http://localhost:4000在浏览器输入这个网址就行了，因为是在调试模式下运行（为了方便后续更改）所以后台一直在执行，如果要关闭这个进程可以 Ctrl + c 关闭 1$ hexo clean &amp;&amp; hexo server --debug 预览效果 至此，初步搭建完成，]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---修改底部标签样式]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E4%BF%AE%E6%94%B9%E5%BA%95%E9%83%A8%E6%A0%87%E7%AD%BE%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[修改底部标签样式 一、打开文件 Blog\themes\next\layout\_macro\post.swigctrl + f 查找 rel=&quot;tag&quot;&gt;#，如果没有就查找 # 然后替换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 然后重建缓存，调试查看效果]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---文章结尾添加版权信息]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E6%96%87%E7%AB%A0%E7%BB%93%E5%B0%BE%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[在文章结尾处添加版权信息 一、修改主题文件打开 Blog\themes\next\_config.yml 按ctrl + f 查找 creative_commons:将post的值改为true 1234567891011121314# Creative Commons 4.0 International License.# See: https://creativecommons.org/share-your-work/licensing-types-examples# Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero# You can set a language value if you prefer a translated version of CC license, e.g. deed.zh# CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org#版权信息creative_commons: license: by-nc-sa #表示当前使用的协议，可以随意更改 sidebar: false #表示是否要显示在左侧边栏 post: true #表示是否在文章结尾处显示 language: 如果你觉得不够详细，可查看 hexo指南]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next博客搭建---文章后面添加结束语]]></title>
    <url>%2F2019%2F07%2F18%2FHexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E6%96%87%E7%AB%A0%E5%90%8E%E9%9D%A2%E6%B7%BB%E5%8A%A0%E7%BB%93%E6%9D%9F%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[文章后面添加结束标语 一、新建文件在 Blog\themes\next\layout\_macro 下创建 passage-end-tag.swig 文件 ，打开该文件添加以下代码 1234567&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #3c3c3c;font-size:15px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt;//如果想替换别的颜色可以更改 color： #后面的色值， font-size:15px 文字大小 二、修改 post.swig 文件打开Blog\themes\next\layout_macro\post.swig文件，在post-body后，post-footer前，添加以下代码 ，可能会找不到，博主这里是直接添加到第 354 行的位置 &lt;div&gt; {% if not is_index %} {% include 'passage-end-tag.swig' %} {% endif %} &lt;/div&gt;三、最后修改主题配置文件打开 Blog\themes\next _config.yml 在末尾的地方添加如下代码 #文章末尾添加“本文结束”标记 passage_end_tag: enabled: true 最后进入博客根目录，执行下面这条命令即可，小扩展：hexo clean 重建缓存，Hexo server –debug 调试 $ hexo clean &amp;&amp; Hexo server –debug]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
